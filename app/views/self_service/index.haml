= render 'shared/articles_by/common'
= content_for :javascript do
  :javascript
    $(document).on('GroupOrderArticle#update', function(e) {
      // update availability:
      const el_goa = $('#goa_'+e.group_order_article_id);
      const el_availability = $('.availability', el_goa);
      const availability = e.group_order_article_availability_data.availability;
      el_availability.text(availability);
      el_availability.attr('title', e.group_order_article_availability_data.title);
      el_availability.tooltip('fixTitle');

      // update row style according to availability:
      const tr = $(el_availability).parents('tr');
      tr
        .removeClass('abundance')
        .removeClass('shortage');

      if (availability > 0) {
        tr.addClass('abundance');
      } else if (availability < 0) {
        tr.addClass('shortage');
      }

      // update funds:
      const availableFunds = $('#available-funds');
      availableFunds.removeClass('just-added');
      void availableFunds[0].offsetWidth;
      availableFunds.addClass('just-added')
        .html(e.available_funds);
    });

    $(document).on('FinancialTransactions#create', function(e) {
      if (e.error) {
        alert(e.errorMessage);
        return;
      }

      const transactions = $('#transactions');
      const tr = $('<tr class="just-added"></tr>')
      tr.append($('<td>' + e.created_on + '</td>'));
      tr.append($('<td class="numeric">' + e.amount + '</td>'));
      tr.append($('<td>' + e.note + '</td>'));
      tr.append($('<td></td>'));
      const firstRow = $('tbody > tr:nth-child(1)', transactions);
      firstRow.after(tr);

      $('#new_financial_transaction')[0].reset();
      $('#financial_transaction_amount')
        .focus()
        .select();

      // update funds:
      var availableFunds = $('#available-funds');
      availableFunds.removeClass('just-added');
      void availableFunds[0].offsetWidth;
      availableFunds.addClass('just-added')
        .html(e.available_funds);

      var accountBalance = $('#account_balance');
      accountBalance.removeClass('just-added');
      void accountBalance[0].offsetWidth;
      accountBalance.addClass('just-added')
        .html(e.account_balance);
    });

    $('#transactions-tab').on('shown', function (e) {
      $('.just-added').removeClass('just-added');
      $('#financial_transaction_amount')
        .focus()
        .select();
    });

    $(document).on('GroupOrderArticle#create', function(e) {
      $('#group_order_' + e.group_order_id + " tr.order_sum_row").before(e.row_html);
    });

    $(function() {
      init_add_article('.add_article');
    });

    function init_add_article(sel) {
      $(sel).removeAttr('disabled').select2({
        placeholder: '#{j t('orders.receive.add_article')}',
        formatNoMatches: function(term) { return '#{j t('.no_articles_available')}';}
        // TODO implement adding a new article, like in deliveries
      }).on('change', function(e) {
        const $input = $(e.target);
        const selectedArticleId = parseInt($input.val(), 10);
        if(!selectedArticleId) {
          return false;
        }
        const groupOrderId = parseInt($(this).attr('data-group-order_id'), 10);

        $.ajax({
          url: '#{group_order_articles_path}',
          type: 'post',
          data: JSON.stringify({group_order_article: {article_id: selectedArticleId, group_order_id: groupOrderId}}),
          contentType: 'application/json; charset=UTF-8'
        });

        $input.val('').trigger('change');
      });
      $(sel).val('').trigger('change');
    }

- title t('.title')
#self-service
  %table.funds
    %tbody
      %tr
        %th=heading_helper(Ordergroup, :available_funds)
        %td#available-funds.value.currency=number_to_currency(@ordergroup.get_available_funds)
        %th=heading_helper(Ordergroup, :account_balance)
        %td#account_balance.value.currency=number_to_currency(@ordergroup.account_balance)
  %ul.nav.nav-tabs
    %li.active
      %a#pickup-tab{:href => '#pickup', 'data-toggle' => 'tab'}=t('.pickup')
    %li
      %a#transactions-tab{:href => '#transactions', 'data-toggle' => 'tab'}=t('.transactions')
  %div.tab-content
    %div#pickup.tab-pane.active
      -@group_orders.each do |group_order|
        %h3= group_order.order.name
        %table.table.table-condensed.table-hover.list#articles_by_groups
          %thead.list-heading
            %tr
              %th{:style => "width:40%"}= heading_helper Article, :name
              %th= heading_helper Article, :unit
              %th.center
                %acronym{:title => t('shared.articles.ordered_desc')}= t 'shared.articles.ordered'
              %th.center
                = t('.availability')
              %th.center
                = t('.fetched')
              %th.symbol
              %th= heading_helper Article, :fc_price, short: true
              %th.symbol
              %th= t 'shared.articles_by.price'
              %th= #heading_helper Article, :unit_quantity, short: true
          = render 'shared/articles_by/group_single', group_order: group_order, self_service: true
        %select.add_article{:style => 'width: 500px;', :disabled => true, 'data-group-order_id' => group_order.id}
          - new_article_data = order_articles_for_select2(group_order.order.received_order_articles, group_order.order_articles.map(&:id))
          - new_article_data.each do |order_article|
            %option{id: "add_article_#{order_article.id}", value: order_article.article.id}
              = "#{order_article.article.name} (#{number_to_currency order_article.article.price}/#{order_article.article.unit}) - #{t('.availability')}: #{order_article.availability}"
      %div.pull-right
        = paginate @group_orders
    %div#transactions.tab-pane
      = simple_form_for @ordergroup.financial_transactions.build, :url => finance_group_transactions_path(@ordergroup), remote: true, html: { class: 'self-service-transaction' } do |form|
        = form.hidden_field :ordergroup_id
        %table.table.table-striped
          %thead
            %tr
              %th= t('.date')
              %th= t('.amount')
              %th= t('.transaction_text')
              %th
          %tbody
            %tr
              %td
              %td= form.input :amount, :label => false, :required => true
              %td= form.text_field :note, :label => false, :required => true
              %td= form.submit
            - @financial_transactions.each do |financial_transaction|
              %tr
                %td.date= format_time(financial_transaction.created_on)
                %td.amount.numeric= format_currency financial_transaction.amount
                %td.note= financial_transaction.note
                %td
